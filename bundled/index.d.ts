// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../@/errors
//   ../@/utils/database

declare module 'mongo-scanner' {
    export * from '@/errors';
    import { Database } from '@/utils/database';
    import { ListDatabasesError, ListCollectionsError } from '@/errors';
    /**
        * The type of the callback called when there is an error in listing databases or collections.
        * @param db If the error happened when listing collections, the db is the database whose collections
        * were tried to be provided
        * @param error The error that happened. It is of type [[ListDatabasesError]] if it happened when
        * listing databases and it is of type [[ListCollectionsError]] if it happened when
        * listing collections.
        */
    export type LackOfPermissionsCallback = (db: string, error: ListDatabasesError | ListCollectionsError) => void;
    /**
        * Represents the database's schema. Every key is a database and every value its collections.
        */
    export interface DatabaseSchema {
            [database: string]: string[];
    }
    /**
        * The options used when [[MongoScanner]] looks for data.
        */
    export interface ScanOptions {
            /**
                * If you want to use the cache before starting a database connection. When true, all the
                * previous executions of the [[MongoScanner]] instance will be checked before establishing a
                * new database connection. The cache is update every time an execution retrieves data
                * form the database connection.
                *
                * Default: false
                */
            useCache?: boolean;
            /**
                * Databases that you want to exclude from the result. You can provide a string, a Regexp or
                * an array of both. A database will be removed from the result if it is equal to a string
                * or matches a Regexp.
                *
                * Default: undefined
                */
            excludeDatabases?: string | RegExp | (string | RegExp)[];
            /**
                * Collections that you want to exclude from the result. You can provide a string, a Regexp or
                * an array of both. A collection will be removed from the result if it is equal to a string
                * or matches a Regexp.
                *
                * Default: undefined
                */
            excludeCollections?: string | RegExp | (string | RegExp)[];
            /**
                * If you want system collections to be excluded by the result.
                *
                * Default: false
                */
            excludeSystem?: boolean;
            /**
                * If you want to exclude empty databases from the result of the method "getSchema()"
                *
                * NB: Database that are not empty but whose collections are excluded by other options such as
                * excludeSystem or excludeCollections will be considered as empty.
                *
                * Default: false
                */
            excludeEmptyDatabases?: boolean;
            /**
                * If you want to ignore and not throw an error occurred when trying to list databases or collections
                * but the connection had not permission to do it.
                *
                * NB: Actually, this will ignore all the errors that
                * will occur when listing database or collections.
                *
                * Default: false
                */
            ignoreLackOfPermissions?: boolean;
            /**
                * The [[LackOfpermissionsCallback]] callback called if an error occurred when trying to list databases or collections
                * but the connection had not permission to do it.
                *
                * NB: Actually, this will be called for all the errors that
                * will occur when listing database or collections.
                *
                * Default: () => { }
                */
            onLackOfPermissions?: LackOfPermissionsCallback;
    }
    /**
        * The MongoScanner class, to retrieve the database schema or to list databases and collections of
        * a MongoDB database.
        */
    export class MongoScanner {
            /**
                * The constructor of the [[MongoScanner]] class. The params are the uri and options for the
                * database connections. The connection is not established by the constructor, the connection
                * parameters are only saved in the [[MongoScanner]] instance.
                * @param uri The string uri of the mongodb connection. Default: 'mongodb://localhost:27017'.
                * @param connectionOptions The options object of the mongodb connection. The npm mongodb module is used under
                * the hood and this is the object provided to MongoClient. Default: { }.
                * @param options The options that will be used as a fallback for the [[ScanOptions]]. For all the
                * keys that will not be present in the options provided to a method that retrieves database or collections,
                * the values provided here will be used instead of the default ones. Default: { }.
                */
            constructor(uri?: string, connectionOptions?: any, options?: ScanOptions);
            _listCollections(db: string, options: ScanOptions, inheritDb: Database): Promise<string[]>;
            /**
                * Starts a persistent connection to mongodb. By default, all methods that retrieve databases or
                * collections from the mongodb open a connection before beginning and close it after finishing.
                * This method allows you to have a persistent connection instead and is useful if you need to perform
                * more than an operation and do not want to open and close connections for each of them.
                */
            startConnection(): Promise<void>;
            /**
                * Closes an already open persistent connection.
                */
            endConnection(): Promise<void>;
            /**
                * Retrieves the databases of a mongodb as a promise to an array of strings.
                * @param options The [[ScanOptions]] options.
                * @returns A promise to an array of strings containing the retrieved databases.
                */
            listDatabases(options?: ScanOptions): Promise<string[]>;
            /**
                * Retrieves the collections of the specified database as a promise to an array of strings.
                * @param database The database whose collections will be exported.
                * @param options The [[ScanOptions]] options.
                * @returns A promise to an array of strings containing the retrieved collections.
                */
            listCollections(database: string, options?: ScanOptions): Promise<string[]>;
            /**
                * Retrieves the schema of a mongodb database as a promise to a [[DatabaseSchema]] object.
                * @param options The [[ScanOptions]] options.
                * @returns A promise to a [[DatabaseSchema]] object representing the database schema. The
                * keys are the databases and their values the collections of the database as an array of strings
                */
            getSchema(options?: ScanOptions): Promise<DatabaseSchema>;
            /**
                * Clears the cache, which contains the results of the previous executions of
                * the [[MongoScanner]] instance.
                */
            clearCache(): void;
    }
}

